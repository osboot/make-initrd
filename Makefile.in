PACKAGE_NAME    := @PACKAGE_NAME@
PACKAGE_VERSION := @PACKAGE_VERSION@

MKLOCAL := @MKLOCAL@

prefix      = @prefix@
exec_prefix = @exec_prefix@
sysconfdir  = @sysconfdir@
bootdir     = @bootdir@
bindir      = @bindir@
sbindir     = @sbindir@
libdir      = @libdir@
libexecdir  = @libexecdir@
execdir     = @libexecdir@/@PACKAGE_NAME@
statedir    = @localstatedir@
runtimedir  = @runtimedir@
datarootdir = @datarootdir@
datadir     = @datadir@
infodir     = @infodir@
mandir      = @mandir@
man1dir     = $(mandir)/man1
tmpdir      = /tmp
projectdir  = @projectdir@
rulesdir    = ${projectdir}/mk

feature_kbd_kbddir := @kbddir@
external_srcdir = $(CURDIR)/external

localbuilddir =
build_prefix = .build

ifneq ($(MKLOCAL),no)
localbuilddir = $(CURDIR)/$(build_prefix)/dest
statedir = /tmp
endif

FEATURESDIR = features
OBJDIR = $(build_prefix)/obj

dest_projectdir   := $(build_prefix)/dest$(projectdir)
dest_sysconfdir   := $(build_prefix)/dest$(sysconfdir)
dest_bindir       := $(build_prefix)/dest$(bindir)
dest_sbindir      := $(build_prefix)/dest$(sbindir)
dest_execdir      := $(build_prefix)/dest$(execdir)
dest_man1dir      := $(build_prefix)/dest$(man1dir)
dest_rulesdir     := $(build_prefix)/dest$(rulesdir)
dest_runtimedir   := $(build_prefix)/dest$(runtimedir)
dest_data_bindir  := $(dest_runtimedir)/bin
dest_data_sbindir := $(dest_runtimedir)/sbin
dest_featuredir   := $(dest_execdir)/$(FEATURESDIR)

HAVE_GZIP        := @HAVE_GZIP@
HAVE_GZIP_LIBS   := @HAVE_GZIP_LIBS@
HAVE_GZIP_CFLAGS := @HAVE_GZIP_CFLAGS@

HAVE_BZIP2        := @HAVE_BZIP2@
HAVE_BZIP2_LIBS   := @HAVE_BZIP2_LIBS@
HAVE_BZIP2_CFLAGS := @HAVE_BZIP2_CFLAGS@

HAVE_LZMA        := @HAVE_LZMA@
HAVE_LZMA_LIBS   := @HAVE_LZMA_LIBS@
HAVE_LZMA_CFLAGS := @HAVE_LZMA_CFLAGS@

HAVE_ZSTD        := @HAVE_ZSTD@
HAVE_ZSTD_LIBS   := @HAVE_ZSTD_LIBS@
HAVE_ZSTD_CFLAGS := @HAVE_ZSTD_CFLAGS@

HAVE_LIBKMOD        := @HAVE_LIBKMOD@
HAVE_LIBKMOD_LIBS   := @HAVE_LIBKMOD_LIBS@
HAVE_LIBKMOD_CFLAGS := @HAVE_LIBKMOD_CFLAGS@

HAVE_LIBELF        := @HAVE_LIBELF@
HAVE_LIBELF_LIBS   := @HAVE_LIBELF_LIBS@
HAVE_LIBELF_CFLAGS := @HAVE_LIBELF_CFLAGS@

VERBOSE ?= $(V)
Q = $(if $(VERBOSE),,@)
NULL :=

PROGS =
SCRIPTS =

-include \
	$(wildcard utils/*/Makefile.mk) \
	$(wildcard datasrc/*/Makefile.mk) \
	$(wildcard $(FEATURESDIR)/*/src/Makefile.mk)

define VAR_c_CFLAGS =
$(1)_c_CFLAGS = $(2)
endef

$(foreach name,$(PROGS),\
	$(foreach src,$($(subst -,_,$(notdir $(name)))_SRCS),\
		$(eval $(call VAR_c_CFLAGS,\
			$(basename $(subst -,_,$(notdir $(src)))),\
			$($(subst -,_,$(notdir $(name)))_CFLAGS)))))

get_objects = $(foreach name,$(filter %.c,$(1)),$(OBJDIR)/$(name:.c=.o))
get_depends = $(foreach name,$(filter %.c,$(1)),$(OBJDIR)/$(name:.c=.d))
quiet_cmd   = $(if $(VERBOSE),$(3),$(Q)printf "  %-08s%s\n" "$(1)" $(2); $(3))

PATH       = $(CURDIR)/$(dest_sbindir):$(CURDIR)/$(dest_bindir):$(shell echo $$PATH)
RULESFILES = $(addprefix $(dest_rulesdir)/,$(patsubst mk/%.in,%,$(wildcard mk/*.mk.in)))
MANPAGES   = $(addprefix $(dest_man1dir)/,$(notdir $(basename $(wildcard man/*.1.inc))))
DATAFILES  = \
	$(addprefix $(dest_projectdir)/,data guess features tools kmodule.deps.d) \
	$(addprefix $(dest_sysconfdir)/,$(patsubst conf/%,%,$(wildcard conf/*)))

CFLAGS = @CFLAGS@ \
	-Wall -Wextra -W -Wshadow -Wcast-align \
	-Wwrite-strings -Wconversion -Waggregate-return -Wstrict-prototypes \
	-Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn \
	-Wmissing-format-attribute -Wredundant-decls -Wdisabled-optimization \
	-Wno-pointer-arith \
	-Werror=shadow -Werror=missing-prototypes -Werror=implicit-function-declaration

CPPFLAGS += @CPPFLAGS@ @DEFS@ -I$(CURDIR) -I$(CURDIR)/utils

UDEVD		= @UDEVD@
UDEVADM		= @UDEVADM@
HELP2MAN	= @HELP2MAN@
USE_BUSYBOX	= @USE_BUSYBOX@
USE_LIBSHELL	= @USE_LIBSHELL@

SED = @SED@ \
	-e 's|@UDEVD[@]|$(UDEVD)|g' \
	-e 's|@UDEVADM[@]|$(UDEVADM)|g' \
	-e 's|@PACKAGE_NAME[@]|$(PACKAGE_NAME)|g' \
	-e 's|@PACKAGE_VERSION[@]|$(PACKAGE_VERSION)|g' \
	-e 's|@bootdir[@]|$(bootdir)|g' \
	-e 's|@sysconfdir[@]|$(sysconfdir)|g' \
	-e 's|@datadir[@]|$(datadir)|g' \
	-e 's|@libdir[@]|$(libdir)|g' \
	-e 's|@statedir[@]|$(statedir)|g' \
	-e 's|@runtimedir[@]|$(runtimedir)|g' \
	-e 's|@feature_kbd_kbddir[@]|$(feature_kbd_kbddir)|g' \
	-e 's|@projectdir[@]|$(localbuilddir)$(projectdir)|g' \
	-e 's|@localbuilddir[@]|$(localbuilddir)|g' \
	-e 's|@execdir[@]|$(execdir)|g'

.PHONY: $(PROGS) $(SCRIPTS)

all: build

build: build-progs build-rules build-data

build-progs: $(PROGS) $(SCRIPTS)

ifneq ($(HELP2MAN),)
build-manpages: build-progs $(MANPAGES)
build: build-manpages
endif

build-rules: $(RULESFILES)

build-data: $(DATAFILES)

install: build-progs build-manpages
	@root="$(CURDIR)/$(build_prefix)/dest"; \
	find "$$root" -mindepth 1 | sort -d | while read -r n; do \
	  dst="$(DESTDIR)/$${n##$$root/}"; \
	  [ -d "$$n" ] && mkdir -p -- "$$dst"; \
	  [ ! -L "$$n" ] && [ -d "$$n" ] && continue; \
	  if [ -L "$$n" ]; then \
	    t="$$(readlink "$$n")"; [ -n "$${t##$(CURDIR)/*}" ] || n="$$t"; \
	    [ -d "$$n" ] && n="$$n/."; \
	  fi; \
	  cp -a $(if $(VERBOSE),-v,) -- "$$n" "$$dst"; \
	done

clean:
	$(Q)rm -f -r -- $(build_prefix)

verify:
	@if SHELLCHECK="$$(which shellcheck 2>/dev/null)"; then \
	    find $(SHELLCHECK_DIRS) -type f -exec file -N '{}' '+' | grep -e 'shell script' | cut -d: -f1 | \
	        xargs -r $$SHELLCHECK -s bash -e "$(SHELLCHECK_EXCLUDE)"; \
	else \
	    echo >&2 "WARNING: shellcheck utility not found."; \
	fi
	@rc=0; \
	for d in `find guess -mindepth 1 -maxdepth 1 -type d`; do \
	    [ -f "$$d/README.md" ] || { \
	        echo >&2 "ERROR: Guess module has no README: $$d"; rc=1; \
	    }; \
	done; exit $$rc; \

verify: SHELLCHECK_DIRS = data features guess tools utils kmodule.deps.d
verify: SHELLCHECK_EXCLUDE = SC1003,SC1090,SC1091,SC2004,SC2006,SC2015,SC2034,SC2086,SC2154

release:
	$(Q)git archive -o $(PKGFILE).tar --prefix=$(PREFIX)/ HEAD
	$(Q)git submodule update --init --checkout --depth=1 --force
	$(Q)git submodule foreach --recursive ' \
	    git archive -o $(PKGFILE)-sm.tar --prefix=$(PREFIX)/$$sm_path/ HEAD; \
	    tar -A -f $(PKGFILE).tar $(PKGFILE)-sm.tar; \
	    rm -f -- $(PKGFILE)-sm.tar;'
	$(Q)xz -S .xz -f $(PKGFILE).tar
	$(Q)echo; echo "Release tarball: $(PKGFILE).tar.xz"; echo;

release: PKGFILE=$(CURDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
release: PREFIX=$(PACKAGE_NAME)-$(PACKAGE_VERSION)

ifeq ($(USE_BUSYBOX),yes)
$(OBJDIR)/external/busybox/.config: $(external_srcdir)/busybox/config
	$(Q)mkdir -p -- "$(OBJDIR)/external/busybox"
	$(Q)mkdir -p -- $(dest_runtimedir)
	$(call quiet_cmd,SED,$@,@SED@) \
	 -e "s,^CONFIG_PREFIX=.*,CONFIG_PREFIX=\"`realpath $(dest_runtimedir)`\",g" < "$<" > "$@"
	$(Q)touch -r $< $@

$(dest_runtimedir)/bin/busybox: $(OBJDIR)/external/busybox/.config
	$(Q)mkdir -p -- "$(OBJDIR)/external/busybox"
	$(MAKE) -C "$(OBJDIR)/external/busybox" \
		-f "$(external_srcdir)/busybox/upstream/Makefile" \
		KBUILD_SRC="$(external_srcdir)/busybox/upstream"
	$(MAKE) -C "$(OBJDIR)/external/busybox" install

build-progs: $(dest_runtimedir)/bin/busybox
endif

ifeq ($(USE_LIBSHELL),yes)
$(dest_bindir)/shell-%: $(external_srcdir)/libshell/upstream/shell-%
	$(Q)mkdir -p -- $(dir $@)
	$(call quiet_cmd,COPY,$@,cp) -a -- $< $@

build-progs: $(foreach n,$(wildcard $(external_srcdir)/libshell/upstream/shell-*), $(dest_bindir)/$(notdir $(n)))
endif

$(dest_rulesdir)/%.mk: mk/%.mk.in
	$(Q)mkdir -p -- $(dir $@)
	$(call quiet_cmd,SED,$@,$(SED)) < $< > $@

$(dest_man1dir)/%.1: man/%.1.inc
	$(Q)mkdir -p -- $(dir $@)
	$(call quiet_cmd,MAN,$@,env -i PATH="${PATH}" $(HELP2MAN) -N) \
	  -i $< -- $(notdir $*) >$@

$(dest_projectdir)/%: %
	$(Q)mkdir -p -- $(dir $@)
	$(Q)rm -f -- "$@"
	$(call quiet_cmd,SLINK,$@,ln) -sf -- "$(CURDIR)/$(notdir $@)" "$@"

$(dest_sysconfdir)/%: conf/%
	$(Q)mkdir -p -- $(dir $@)
	$(Q)cp -a -- $< $@

cflags = $($(subst -,_,$(notdir $*))_c_CFLAGS)
$(OBJDIR)/%.o: %.c
	$(Q)mkdir -p -- $(dir $@)
	$(call quiet_cmd,CC,$<,$(COMPILE.c)) $(cflags) $(OUTPUT_OPTION) $<

cflags = $($(subst -,_,$(notdir $*))_c_CFLAGS)
$(OBJDIR)/%.d: %.c
	$(Q)mkdir -p -- $(dir $@)
	$(call quiet_cmd,DEP,$<,$(CC)) -MM $(cflags) $(CPPFLAGS) $(CFLAGS) $< | \
	  sed -e 's,\($(notdir $*)\)\.o[ :]*,$(@:.d=.o) $@: Makefile ,g' >$@

define generate_link_target =
DEPS += $(call get_depends,$($(1)_SRCS))

$($(1)_DEST): $(call get_objects,$($(1)_SRCS))
	$(Q)mkdir -p -- $(dir $($(1)_DEST))
	$(call quiet_cmd,CCLD,$($(1)_DEST),$(LINK.o)) -o $($(1)_DEST) $$^ $($(1)_LIBS)

$(1): $($(1)_DEST)
endef

define generate_script_target =
$($(1)_DEST): $($(1)_SRCS)
	$(Q)mkdir -p -- $$(dir $($(1)_DEST))
	$(call quiet_cmd,SED,$($(1)_DEST),$(SED)) < $($(1)_SRCS) > $($(1)_DEST)
	$(Q)touch -r $($(1)_SRCS) $($(1)_DEST)
	$(Q)chmod --reference=$($(1)_SRCS) $($(1)_DEST)

$(1): $($(1)_DEST)
endef

$(foreach name,$(PROGS),  $(eval $(call generate_link_target,$(name))))
$(foreach name,$(SCRIPTS),$(eval $(call generate_script_target,$(name))))

define generate_symlink_target =
$(1): $($(2)_DEST)
	$(Q)mkdir -p -- $$(dir $(1))
	$(call quiet_cmd,SLINK,$(1),ln) -rsf -- $($(2)_DEST) $(1)

build-progs: $(1)
endef

$(foreach name,$(PROGS),\
	$(foreach symlink,$($(name)_SYMLINKS),\
		$(eval $(call generate_symlink_target,$(symlink),$(name)))))

ifeq ($(filter verify clean,$(MAKECMDGOALS)),)
-include $(DEPS)
endif
