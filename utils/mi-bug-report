#!/bin/bash -efu
# SPDX-License-Identifier: GPL-3.0-or-later

export LANG=C
export LC_ALL=C

. shell-error
. shell-getopt
. shell-args
. shell-temp

print_version() {
	cat <<-EOF
	mi-bug-report version 2.0
	Written by  Alexey Gladkov.

	Copyright (C) 2024  Alexey Gladkov <gladkov.alexey@gmail.com>
	This is free software; see the source for copying conditions.  There is NO
	warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	EOF
	exit
}

show_help() {
	cat <<-EOF

	Usage: $PROG [<option>] <report-archive> [<command> [<args>]]

	Options:
	   -v, --verbose          print a message for each action;
	   -V, --version          output version information and exit;
	   -h, --help             display this help and exit.

	Report bugs to authors.

	EOF
	exit
}

if [ -z "${__BUG_REPORT-}" ]; then
	TEMP=`getopt -n "$PROG" -o 'h,v,V' -l 'help,verbose,version' -- "$@"` ||
		show_usage
	eval set -- "$TEMP"

	while :; do
		case "$1" in
			-h|--help)
				show_help
				;;
			-v|--verbose)
				verbose="-v"
				;;
			-V|--version)
				print_version
				;;
			--) shift
				break
				;;
			*)
				fatal "Unknown option: $1"
				;;
		esac
		shift
	done

	if [ "$#" -eq 0 ]; then
		message "more arguments required"
		show_usage
	fi

	archive=$(readlink -ev "$1")
	shift

	[ "$#" -gt 0 ] ||
		set -- "$@" /bin/bash -l

	workdir=
	create_temporary workdir

	mkdir -- \
		"$workdir/proc" \
		"$workdir/root" \
		#

	verbose "making new namespace ..."

	export verbose
	export __BUG_REPORT=1
	export __BUG_REPORT_ARCHIVE="$archive"
	export __BUG_REPORT_PWD="$PWD"

	unshare --mount \
		--pid --mount-proc="$workdir/proc" --fork \
		--user --map-root-user \
		--wd="$workdir" "$(readlink -ev "$0")" "$@"
else
	workdir="$PWD"

	verbose "setup workdir $workdir ..."

	mount $verbose -t tmpfs tmpfs "$workdir/root"
	cd "$workdir/root"

	verbose "unpacking archive $__BUG_REPORT_ARCHIVE ..."
	{
		tar --strip-components=1 --no-same-owner -xf "$__BUG_REPORT_ARCHIVE"
	} >&2
	verbose "unpacked"

	# Create part of /dev with several necessary devices
	{
		mkdir -p -- dev

		for name in null zero full random tty ptmx; do
			touch "dev/$name"
			mount --rbind "/dev/$name" "dev/$name"
		done

		ln -s /proc/self/fd   dev/fd
		ln -s /proc/self/fd/0 dev/stdin
		ln -s /proc/self/fd/1 dev/stdout
		ln -s /proc/self/fd/2 dev/stderr
	}

	# We can't overlay or bind mount to dynamic part of procfs, but some
	# programs (for example findmnt) use only them to obtain data.
	# So we emulate parts of procfs. Yes, it's dirty, but it allows you to
	# fool programs.
	{
		mkdir -p -- proc/self

		find /proc/self/ -mindepth 1 -maxdepth 1 -type d -printf '%f\n' |
		while read -r name; do
			[ -e "proc/self/$name" ] ||
				ln -s -- "$workdir/proc/self/$name" "proc/self/$name"
		done

		for name in 1 uptime cpuinfo meminfo locks net sys; do
			[ -e "proc/$name" ] ||
				ln -s -- "$workdir/proc/$name" "proc/$name"
		done

		ln -s -- self proc/thread-self
	}

	# I'm not sure we need to override /etc.
	{
		mkdir -p -- etc

		for name in ld.so.cache ld.so.conf protocols rpc services; do
			src="$(readlink -ev "/etc/$name" 2>/dev/null)" ||
				continue
			touch "etc/$name"
			mount $verbose --bind -- "$src" "etc/$name"
		done

		ln -s -- /proc/mounts etc/mtab

		[ -f etc/passwd    ] || printf > etc/passwd    'root:x:0:0:root:%s:/bin/bash\n' "$workdir"
		[ -f etc/group     ] || printf > etc/group     'root:x:0:\n'
		[ -f etc/initrd.mk ] || printf > etc/initrd.mk 'AUTODETECT = all\n'
	}

	# We overlap the system directories with prepared directories from the
	# bug report.
	find . -mindepth 1 -maxdepth 1 -type d -printf './%f /%f\n' |
	while read -r src dst; do
		case "$dst" in
			/lib)
				[ -d lib/modules ] && [ -d /lib/modules ] ||
					continue
				src=lib/modules
				dst="$(readlink -ev /lib/modules)"
				;;
		esac
		[ ! -L "$dst" ] ||
			dst="$(readlink -ev "$dst")"

		if [ ! -e "$dst" ]; then
			verbose "skip \`$dst'"
			continue
		fi
		mount $verbose --rbind "$src" "$dst"
	done

	mkdir -p -- "$workdir"/bin
	cat > "$workdir"/bin/procfs <<-'EOF'
	#!/bin/bash -efu
	PROG="${0##*/}"
	varname="__procfs_${PROG//-/_}"
	if eval "test -n \"\${$varname-}\""; then
	   mount --bind "$HOME/proc" /proc
	   export "PATH=${PATH#$HOME/bin:}"
	   exec "$PROG" "$@"
	fi
	export "$varname=1"
	exec unshare --mount "$0" "$@"
	EOF
	chmod 755 -- "$workdir"/bin/procfs

	ln -s -- procfs "$workdir"/bin/ps
	ln -s -- procfs "$workdir"/bin/pstree
	ln -s -- procfs "$workdir"/bin/top

	cat > "$workdir/.profile" <<-'EOF'
	alias cp='cp -i'
	alias mv='mv -i'
	alias rm='rm -i'
	alias l='ls -la'
	EOF

	[ -d lib/modules ] &&
		kver=$(find lib/modules/ -mindepth 1 -maxdepth 1 -printf '%f' -quit ||:) ||
		kver=$(uname -r)

	kmodules="$(find "/lib/modules/$kver/kernel" -name '*.ko*' -print -quit 2>/dev/null ||:)"
	[ -n "$kmodules" ] ||
		message "WARNING: There are no modules in the directory: /lib/modules/$kver/kernel"

	export KERNEL="$kver"
	export HOME="$workdir"
	export PATH="$HOME/bin:$PATH"
	export TMPDIR=/tmp
	export PS1='[report ($KERNEL) \W]\$ '
	export MAKE_INITRD_TESTING=1

	[ -e /etc/findmnt.out1 ] &&
		export MAKE_INITRD_BUG_REPORT=2 ||
		export MAKE_INITRD_BUG_REPORT=1

	cd "${__BUG_REPORT_PWD:-/}" ||:

	exec "$@"
fi
