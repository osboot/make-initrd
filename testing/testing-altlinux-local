#!/bin/bash -efu
# SPDX-License-Identifier: GPL-3.0-or-later

topdir="$(readlink -ev "$0")"
topdir="${topdir%/*/*}"

. "$topdir/testing/sh-functions"

readonly VENDOR=altlinux
readonly ARCH=x86_64
readonly IMAGE=alt:sisyphus

. "$topdir/testing/packages-$VENDOR"

if [ "$#" -gt 1 ]; then
	TESTNAME="$1"; shift
	eval $(sed -n -e 's/^# param //p' "$topdir/testing/$TESTNAME.cfg")
else
	TESTNAME=
fi

readonly builddir=/srv

readonly workdir="testing/cache/$VENDOR/$TESTNAME"
readonly logdir="testing/logs/$VENDOR/$TESTNAME"
readonly statusdir="$topdir/testing/status"

readonly top_workdir="$topdir/$workdir"
readonly top_logdir="$topdir/$logdir"

apt_args="-y -qq -o=APT::Install::Virtual=true -o=APT::Install::VirtualVersion=true"

prepare_testsuite

image_cleanup()
{
	printf '%s ||:; ' \
	 "find /usr/share/license /usr/share/license-exception -delete" \
	 "find /usr/share/locale/ -mindepth 3 -maxdepth 3 -type f -name '*.mo' -delete" \
	 "find /usr/share/doc/ /usr/share/man/ /usr/share/info/ -mindepth 1 -delete" \
	 "find /var/lib/apt/lists/ /var/cache/apt/ -type f -delete" \
	 "find /usr/src/ -mindepth 1 -delete" \
	 "find /lib/firmware $(find_ignore_firmware) -delete" \
	 "find /lib/modules $(find_ignore_kmodules) -delete"
	printf '\n'
}

for step in "$@"; do
	case "$step" in
		create-images)
			run podman image build --squash --force-rm \
				--pull=missing \
				-t "localhost/image-$VENDOR:sysimage" \
				-f - <<-EOF
			FROM $IMAGE
			RUN rpm -ql filesystem | xargs -r mkdir -p
			RUN apt-get $apt_args update
			RUN apt-get $apt_args install $KERNEL_PACKAGES
			RUN apt-get $apt_args install $SYSIMAGE_PACKAGES
			RUN apt-get $apt_args clean
			RUN $(image_depmod)
			RUN $(image_cleanup)
			EOF

			run podman image build --squash --force-rm \
				--pull=never \
				-t "localhost/image-$VENDOR:devel" \
				-f - <<-EOF
			FROM localhost/image-$VENDOR:sysimage
			RUN apt-get $apt_args update
			RUN apt-get $apt_args install $KERNEL_PACKAGES
			RUN apt-get $apt_args install $KICKSTART_PACKAGES
			RUN apt-get $apt_args clean
			RUN $(image_depmod)
			RUN $(image_cleanup)
			EOF
			;;
		build-sources)
			gh_group_start "building from git tree"

			cat_exec "$top_workdir/run.sh" <<-EOF
			#!/bin/bash -efux

			cd "$builddir"
			rc=0

			./autogen.sh
			./configure \
				--enable-local-build \
				--with-runtimedir=/lib/initrd1 || rc=\$?

			if [ "\$rc" != 0 ]; then
				echo '========================================='
				cat config.log
				exit 1
			fi

			make || rc=\$?

			if [ "\$rc" != 0 ]; then
				echo '========================================='
				cat config.log
				exit 1
			fi
			EOF

			run podman run --rm -i --volume="$topdir:$builddir" \
				"localhost/image-$VENDOR:devel" \
				"$builddir/$workdir/run.sh"

			gh_group_end
			;;
		build-sysimage)
			gh_group_start "packing sysimage"
			pack_sysimage
			gh_group_end
			;;
		build-kickstart)
			gh_group_start "creating kickstart image"

			cat_exec "$top_workdir/run.sh" <<-EOF
			#!/bin/bash -efux

			kver="\$(find /lib/modules -mindepth 1 -maxdepth 1 -printf '%f\n' -quit)"

			cat > /etc/initrd.mk <<EOF1
			 AUTODETECT =
			 DISABLE_FEATURES += ucode
			 FEATURES = add-modules add-udev-rules kickstart qemu rdshell modules-virtio modules-blockdev
			 MODULES_ADD += sd_mod
			 MODULES_PRELOAD += virtio-blk virtio-scsi virtio-pci
			 KICKSTART_CONFIGS = $builddir/$workdir/ks.cfg
			 PUT_PROGS += pwgen
			EOF1

			export PATH="$builddir/.build/dest/usr/sbin:$builddir/.build/dest/usr/bin:\$PATH"

			$builddir/.build/dest/usr/sbin/make-initrd -v -k "\$kver"

			cp -L /boot/vmlinuz    $builddir/$workdir/boot-ks-vmlinuz
			cp -L /boot/initrd.img $builddir/$workdir/boot-ks-initrd.img
			EOF

			podman run --rm -i --volume="$topdir:$builddir" \
				"localhost/image-$VENDOR:devel" \
				"$builddir/$workdir/run.sh"

			gh_group_end
			;;
		run-kickstart)
			gh_group_start "creating qemu kickstart disks"

			BOOT_PROG=
			BOOT_KERNEL="$top_workdir/boot-ks-vmlinuz"
			BOOT_INITRD="$top_workdir/boot-ks-initrd.img"
			BOOT_APPEND='console=ttyS0,115200n8 quiet rdlog=console ksfile=ks.cfg'

			qemu_setup_cpu
			qemu_setup_kickstart_disks
			qemu_exec

			gh_group_end
			;;
		run-boot)
			gh_group_start "checking the ability to boot"

			qemu_setup_cpu
			qemu_setup_boot_disks
			qemu_exec

			gh_group_end
			;;
		*)
			fatal "unknown step: $step"
			;;
	esac
done
